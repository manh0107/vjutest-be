package com.example.vjutest.Service;

import java.util.Optional;
import java.util.Random;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.vjutest.DTO.AuthRequest;
import com.example.vjutest.DTO.AuthResponse;
import com.example.vjutest.DTO.RegisterRequest;
import com.example.vjutest.Jwt.JwtTokenProvider;
import com.example.vjutest.Model.Role;
import com.example.vjutest.Model.User;
import com.example.vjutest.Repository.RoleRepository;
import com.example.vjutest.Repository.UserRepository;
import com.example.vjutest.User.CustomUserDetails;


@Service
public class AuthService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private RoleRepository roleRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private JwtTokenProvider tokenProvider;

    @Autowired
    private EmailService emailService;

    // üîπ T·∫°o m√£ x√°c nh·∫≠n ng·∫´u nhi√™n g·ªìm 6 ch·ªØ s·ªë
    private String generateVerificationCode() {
        Random random = new Random();
        int code = 100000 + random.nextInt(900000); // M√£ 6 ch·ªØ s·ªë t·ª´ 100000 ƒë·∫øn 999999
        return String.valueOf(code);
    }

    // üîπ ƒêƒÇNG K√ù
    public String register(RegisterRequest request) {
        Optional<Role> roleOpt = roleRepository.findByName(request.getRoleName());
        if (roleOpt.isEmpty()) {
            return "Role kh√¥ng t·ªìn t·∫°i!";
        }

        if (userRepository.existsByEmail(request.getEmail())) {
            return "Email ƒë√£ t·ªìn t·∫°i!";
        }

        String encodedPassword = passwordEncoder.encode(request.getPassword());
        String verificationCode = generateVerificationCode();

        User user = new User(
                request.getName(),
                request.getCode(),
                request.getPhoneNumber(),
                request.getClassName(),
                request.getGender(),
                request.getEmail(),
                encodedPassword,
                roleOpt.get(),
                "https://static.vecteezy.com/system/resources/thumbnails/020/765/399/small/default-profile-account-unknown-icon-black-silhouette-free-vector.jpg"
        );

        user.setVerificationToken(verificationCode);  // L∆∞u m√£ x√°c nh·∫≠n
        user.setEnabled(false);  // M·∫∑c ƒë·ªãnh ch∆∞a k√≠ch ho·∫°t t√†i kho·∫£n
        userRepository.save(user);

        // G·ª≠i m√£ x√°c nh·∫≠n qua email
        emailService.sendEmail(user.getEmail(), "M√£ x√°c nh·∫≠n t√†i kho·∫£n", 
                "M√£ x√°c nh·∫≠n c·ªßa b·∫°n l√†: " + verificationCode);

        return "ƒêƒÉng k√Ω th√†nh c√¥ng! Ki·ªÉm tra email ƒë·ªÉ l·∫•y m√£ x√°c nh·∫≠n.";
    }

    // üîπ X√ÅC NH·∫¨N EMAIL
    public String verifyEmail(String email, String verificationCode) {
        Optional<User> userOpt = userRepository.findByEmail(email);
        if (userOpt.isEmpty()) {
            return "Email kh√¥ng t·ªìn t·∫°i!";
        }

        User user = userOpt.get();

        // Ki·ªÉm tra m√£ x√°c nh·∫≠n c√≥ kh·ªõp kh√¥ng
        if (!user.getVerificationToken().equals(verificationCode)) {
            return "M√£ x√°c nh·∫≠n kh√¥ng h·ª£p l·ªá!";
        }

        // K√≠ch ho·∫°t t√†i kho·∫£n v√† x√≥a m√£ x√°c nh·∫≠n
        user.setEnabled(true);
        user.setVerificationToken(null);
        userRepository.save(user);

        return "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t th√†nh c√¥ng!";
    }

    // üîπ ƒêƒÇNG NH·∫¨P
    public AuthResponse login(AuthRequest request) {
        try {
            System.out.println("ƒêang x√°c th·ª±c user: " + request.getEmail());
            Authentication authentication = authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(request.getEmail(), request.getPassword()));
            // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ Authentication
            CustomUserDetails userDetails = (CustomUserDetails) authentication.getPrincipal();
            User userEntity = userDetails.getUser();
    
            // Ki·ªÉm tra t√†i kho·∫£n ƒë√£ k√≠ch ho·∫°t hay ch∆∞a
            if (!userEntity.isEnabled()) {
                return new AuthResponse(null, "T√†i kho·∫£n ch∆∞a k√≠ch ho·∫°t!");
            }
    
            // T·∫°o JWT token
            String jwt = tokenProvider.generateToken(userDetails);
            return new AuthResponse(jwt, "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
        } catch (Exception e) {
            System.out.println("L·ªói x√°c th·ª±c: " + e.getMessage());
            throw new RuntimeException("ƒêƒÉng nh·∫≠p th·∫•t b·∫°i!");
        }
    }

    // üîπ QU√äN M·∫¨T KH·∫®U
    public String forgotPassword(String email) {
        Optional<User> userOpt = userRepository.findByEmail(email);
        if (userOpt.isEmpty()) {
            return "Email kh√¥ng t·ªìn t·∫°i!";
        }

        User user = userOpt.get();
        String resetToken = UUID.randomUUID().toString();
        user.setVerificationToken(resetToken);
        userRepository.save(user);

        // G·ª≠i email reset m·∫≠t kh·∫©u
        String link = "http://localhost:8080/auth/reset-password?token=" + resetToken;
        emailService.sendEmail(user.getEmail(), "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u", "B·∫•m v√†o ƒë√¢y ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: " + link);

        return "H√£y ki·ªÉm tra email ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.";
    }

    // üîπ ƒê·∫∂T L·∫†I M·∫¨T KH·∫®U
    public String resetPassword(String token, String newPassword) {
        Optional<User> userOpt = userRepository.findByVerificationToken(token);
        if (userOpt.isEmpty()) {
            return "M√£ kh√¥ng h·ª£p l·ªá!";
        }

        User user = userOpt.get();
        user.setPassword(passwordEncoder.encode(newPassword));
        user.setVerificationToken(null);
        userRepository.save(user);

        return "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i!";
    }
}
